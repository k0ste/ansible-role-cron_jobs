---
- name: cron_jobs | Deploy cron jobs
  ansible.builtin.cron:
    backup: "{{ item['value']['backup'] | default(omit) }}"
    cron_file: "{{ item['value']['file'] | default(omit) }}"
    day: "{{ item['value']['day'] | default(omit) }}"
    disabled: "{{ item['value']['disabled'] | default(omit) }}"
    env: "{{ item['value']['env'] | default(omit) }}"
    hour: "{{ item['value']['hour'] | default(omit) }}"
    insertafter: "{{ item['value']['insertafter'] | default(omit) }}"
    insertbefore: "{{ item['value']['insertbefore '] | default(omit) }}"
    job: "{{ item['value']['job'] | default(omit) }}"
    minute: "{{ item['value']['minute'] | default(omit) }}"
    month: "{{ item['value']['month'] | default(omit) }}"
    name: "{{ item['key'] }}"
    special_time: "{{ item['value']['special_time'] | default(omit) }}"
    state: "{{ item['value']['state'] | default(omit) }}"
    user: "{{ item['value']['user'] | default(omit) }}"
    weekday: "{{ item['value']['weekday'] | default(omit) }}"
  loop: "{{ vars['cron_jobs_settings'] | dict2items() }}"
  loop_control:
    label: "{{ item['key'] }}"
  notify:
    - "Restart cron"
- name: cron_jobs | Enable cron
  ansible.builtin.service:
    name: "{{ hostvars[inventory_hostname]['cron_jobs_service'] }}"
    enabled: "yes"
  when:
    - "hostvars[inventory_hostname]['cron_jobs'] is defined"
    - "hostvars[inventory_hostname]['cron_jobs'] != ''"
    - "hostvars[inventory_hostname]['cron_jobs'] |
       community.general.json_query(vars['cron_jobs_enable']) is defined"
    - "hostvars[inventory_hostname]['cron_jobs'] |
       community.general.json_query(vars['cron_jobs_enable']) == 'true'"
  vars:
    cron_jobs_enable: "[] | map(&enable || 'false', @) | [0]"
